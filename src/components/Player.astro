---
import type { Options, QualityOptions, SourceInfo } from "plyr";

export type Props = {
    source: SourceInfo;
};

const { source } = Astro.props;

const options: Options & { urls: { download: string } } = {
    controls: [
        "play-large",
        "play",
        "progress",
        "current-time",
        "mute",
        "volume",
        "settings",
        "download",
        "fullscreen",
    ],
    urls: {
        download: source.sources.find((src) => src.size === 1080)?.src ?? "",
    },
    quality: {
        default: 1080,
        options: source.sources
            .map((src) => src.size)
            .filter((size): size is number => size !== undefined),
    },
};
---

<script>
    import Plyr from "plyr";
    import "plyr/dist/plyr.css";

    const plyrEls = document.querySelectorAll(".plyr");
    Plyr.setup(plyrEls).forEach((player, i) => {
        const plyrEl = plyrEls[i] as HTMLElement;
        const plyrSource = JSON.parse(plyrEl.dataset.plyrSource as string);
        const savedQuality = JSON.parse(
            localStorage.getItem("plyr") || '{"quality": 1080}'
        ).quality;

        let quality = plyrSource.sources.find(
            (src: { src: string; size: number }) => src.size === savedQuality
        );

        if (!quality) {
            quality = 1080;
            localStorage.setItem("plyr", JSON.stringify({ quality: 1080 }));
        }

        // @ts-ignore
        player.config.urls.download = quality.src; //(plyrSource);

        player.source = plyrSource;
    });
</script>
<video
    class="plyr"
    data-plyr-config={JSON.stringify(options)}
    data-plyr-source={JSON.stringify(source)}></video>
